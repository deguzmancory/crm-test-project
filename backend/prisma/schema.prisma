datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// **Users Table (Admins & Salespeople)**
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  accounts      Account[]      @relation("SalesRep_Account")
  followUps     FollowUp[]
  subscriptions Subscription[]
  roles         UserRole[]
}

enum RoleType {
  ADMIN
  SALES_REP
}

/// **User Role Table (Many-to-Many Relationship for Roles)**
model UserRole {
  id     String   @id @default(uuid())
  userId String
  role   RoleType

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Deletes roles if user is deleted
}

/// **B2B Accounts Table**
model Account {
  id         String          @id @default(uuid())
  name       String
  industry   String?
  category   AccountCategory @default(C)  
  salesRepId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  // Relationships
  salesRep  User?      @relation(fields: [salesRepId], references: [id], onDelete: SetNull, name: "SalesRep_Account")
  followUps FollowUp[]
  contact  Contact[]  
}

enum AccountCategory {  
  A
  B
  C
  D
}


/// **Contacts Table**
model Contact {
  id        String   @id @default(uuid())
  accountId String   // Removed @unique to allow multiple contacts per account
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())

  // Relationships
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

/// **Follow-ups Table**
model FollowUp {
  id           String         @id @default(uuid())
  accountId    String
  salesRepId   String?
  followUpDate DateTime
  status       FollowUpStatus @default(PENDING)
  createdAt    DateTime       @default(now())

  // Relationships
  account  Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  salesRep User?   @relation(fields: [salesRepId], references: [id], onDelete: SetNull)
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  OVERDUE
}

/// **Subscription Table**
model Subscription {
  id        String             @id @default(uuid())
  userId    String
  plan      SubscriptionPlan   @default(BASIC)
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now())
  endDate   DateTime
  createdAt DateTime           @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Deletes subscription when user is deleted
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}
